class World

types
    public Angle = real inv N == N >= 0 and N <= 1.6; -- begrÃ¦nsning N ca 0 til 90 grader

instance variables
    io : IO := new IO();

operations
    public echoState : (nat) ==> ()
    echoState(counter) == (
        dcl str : seq of char := "";
        str := str ^ "Time count: ";
        str := str ^ VDMUtil`val2seq_of_char[nat](counter);
        str := str ^ "\n";
        str := str ^ "Motor status: ";
        str := str ^ VDMUtil`val2seq_of_char[bool](MySystem`arm.env_motorOn);
        str := str ^ "\n";
        str := str ^ "Enviroment q: ";
        str := str ^ VDMUtil`val2seq_of_char[real](MySystem`arm.env_q);
        str := str ^ "\n";
        str := str ^ "Controller q: ";
        str := str ^ VDMUtil`val2seq_of_char[real](MySystem`controller.ctl_q);
        str := str ^ "\n";
        str := str ^ "Enviroment q_t: ";
        str := str ^ VDMUtil`val2seq_of_char[real](MySystem`arm.env_qt);
        str := str ^ "\n";
        str := str ^ "Controller q_t ";
        str := str ^ VDMUtil`val2seq_of_char[real](MySystem`controller.ctl_q_t);
        str := str ^ "\n";
        str := str ^ "Enviroment q_vel: ";
        str := str ^ VDMUtil`val2seq_of_char[real](MySystem`arm.env_q_vel);
        str := str ^ "\n";
        str := str ^ "Controller q_vel: ";
        str := str ^ VDMUtil`val2seq_of_char[real](MySystem`controller.ctl_q_vel);
        str := str ^ "\n";
        str := str ^ "kd value: ";
        str := str ^ VDMUtil`val2seq_of_char[real](MySystem`arm.kd);
        str := str ^ "\n";
        str := str ^ "kp value: ";
        str := str ^ VDMUtil`val2seq_of_char[real](MySystem`arm.kp);
        str := str ^ "\n";
        str := str ^ "vel change: ";
        str := str ^ VDMUtil`val2seq_of_char[real](MySystem`controller.ctl_vel_change);
        str := str ^ "\n";
        str := str ^ "\n";
        def - = io.echo(str) in skip; -- ignore the return value
    );

    -- scenario 1
    public Scenario1 : () ==> bool
    Scenario1() == (
    dcl StepCount : nat := 0;
    MySystem`controller.MotorOn();
    MySystem`arm.SetCurrentPosition(0.5);
    MySystem`arm.SetTargetPosition(1.2);
    
    while StepCount < 500 do (
        MySystem`controller.MonitorChangeAngle();
        MySystem`controller.MonitorVel();
        MySystem`controller.MonitorVelChange();
        MySystem`controller.AdjustControlParameters(); 
        MySystem`controller.MonitorAngle();
        MySystem`controller.EnsureSafeAngle();
        MySystem`arm.Step(1);
        echoState(StepCount);
        StepCount := StepCount + 1;
    );

    return true;
);
    -- scenario 2
    public Scenario2 : () ==> bool
    Scenario2() == (
        dcl StepCount : nat := 0;
        MySystem`controller.MotorOn();
        MySystem`arm.SetCurrentPosition(1.3);
        MySystem`arm.SetTargetPosition(0.0);
        MySystem`arm.SetKp(0.01); -- assumed ideal Kp for minimal overshoot
        MySystem`arm.SetKd(0.02); -- assumed ideal Kd for at lessen oscillation

        while StepCount < 500 do ( 
            MySystem`controller.MonitorAngle();
            MySystem`controller.EnsureSafeAngle();
            MySystem`arm.Step(1);
            echoState(StepCount);
            StepCount := StepCount + 1;
        );

        return true;
    );

end World