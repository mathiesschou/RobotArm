class Controller

values 
    public M1 : real = -0.2; -- max lower range
    public M2 : real = 1.8; -- max upper range
    public N1 : real = 0; -- safe lower range
    public N2 : real = 1.6; -- safe upper range

instance variables
    public ctl_q: real; 
    public kp: real := 0.1; -- proportional factor
    public kd: real := 0.01; -- derivative factor
    public prevError: real := 0; -- radians
    public ctl_motorTorque : real;
    public I : real := 2 * MySystem`arm.r * MySystem`arm.r;

operations
    public Controller : () ==> Controller
    Controller () ==( 
        ctl_q := 0;
        ctl_motorTorque := 0;
    ); 

    --! Montoring of environment
    public MonitorAngle : () ==> ()
    MonitorAngle() == duration(0) (
        ctl_q := MySystem`arm.env_q;
    );

    public TorqueValue : () ==> ()
    TorqueValue() == duration(0)(
        ctl_motorTorque := MySystem`arm.env_motorTorque;
    );

    --! Coefficients
    public SetKp: real ==> ()
    SetKp(k_p) == (
        kp := k_p;
    );

    public SetKd: real ==> ()
    SetKd(k_d) == (
        kd := k_d;
    );
    
     -- Getter method for motorTorque
    public GetMotorTorque: () ==> real
    GetMotorTorque() == (
        return MySystem`arm.env_motorTorque;
    );

    -- Getter method for I
    public GetI: () ==> real
    GetI() == (
        return I;
    );
    -- Calculation method for torque
    public CalculateData: () ==> ()
    CalculateData() == (
        dcl errorPos : real := MySystem`arm.env_qt - MySystem`arm.env_q;
        dcl errorDerivative : real := (errorPos - prevError) / 1;
        dcl slowingFactor : real := 0.5;

        if abs(errorPos) > 0.4 then
            errorPos := errorPos * 1.2;

        if MySystem`arm.env_q < MySystem`controller.N1 or MySystem`arm.env_q > MySystem`controller.N2 then
            -- Slow down the movement
            errorPos := errorPos * slowingFactor;

        MySystem`arm.env_motorTorque := (kp * errorPos) + (kd * errorDerivative);
        
        prevError := errorPos;
    );

end Controller
