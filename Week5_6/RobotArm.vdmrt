class RobotArm

types
    public Angle = real inv N == N >= 0 and N <= 1.6; -- begrænsning N ca 0 til 90 grader

values 

    public N1 : real = 0;
    public N2 : real =1.6;

    r: real = 0.8; -- arm lægnde i m
    mass: real = 1.2; -- kg
    Fc: real = 0.1; -- Coulomb friktionskoefficient
    Fv: real = 0.05; -- viskøs friktionskoefficient


instance variables

    public env_q : real; -- kg, angle of roint. radianer
    public env_motor : nat; -- 1=running, 0=stopped
    public env_qt : real;
    
    public q_vel: real; -- hastighed. rad/s
    public q_acc: real; -- acceleration. rad/s^2

    --! PID controller
    
    public kp: real; -- proportional factor
    public kd: real; -- derivative factor
    public prevError: real; -- radianer

    public accumulatedTime: real; -- simuleret tid

operations
    public RobotArm: () ==> RobotArm
    RobotArm() == (
        env_motor := 0;
        env_q := 0;
        env_qt := 0;

        q_vel := 0; 
        kp := 0.1; 
        kd := 0.01;
        q_acc := 0; 
        prevError := 0; 
        accumulatedTime := 0; 
    );

    public SetTargetPosition: Angle ==> ()
    SetTargetPosition(target) == (
        env_qt := target;
    );

    public SetCurrentPosition: Angle ==> ()
    SetCurrentPosition(position) == (
        env_q := position;
    );

    public SetKp: real ==> ()
    SetKp(k_p) == (
        kp := k_p;
    );

    public SetKd: real ==> ()
    SetKd(k_d) == (
        kd := k_d;
    );
    
    public Step: real ==> ()
    Step(delta) == duration(0) (
        -- time_factor assumed to be in seconds
        dcl errorPos : real := 
                (env_motor * env_qt) - (env_motor * env_q),
        errorDerivative : real := (errorPos - prevError) / delta,
        motorTorque : real := (kp * errorPos) + (kd * errorDerivative);
            dcl I : real := 2 * r * r; -- antager en standard inertimoment 2*r^2
        
        -- Update previous error
        prevError := errorPos;

        -- Update movement values
        q_acc := motorTorque / I; -- antager uniform massefordeling armlængde meter. a = t / i
        q_vel := q_vel + q_acc * delta;
        env_q := env_q + q_vel * delta;

        -- Update time
        accumulatedTime := accumulatedTime + delta;

        --! Boundary conditions
        if env_q < 0 then env_q := 0
        elseif env_q > 1.6 then env_q := 1.6;
    );
    
end RobotArm