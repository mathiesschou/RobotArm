class World

operations

    -- test
    public ScenarioTest : () ==> bool
    ScenarioTest() == (
        dcl StepCount : nat := 0;

        MySystem`arm.SetCurrentPosition(0);
        MySystem`arm.SetTargetPosition(1);
        MySystem`arm.SetKp(0.1); -- systems reaktion p√• en fejl
        MySystem`arm.SetKd(0.2); -- systemets overshoot

        while StepCount < 500 do ( 
            MySystem`arm.Step(1);
            StepCount := StepCount + 1;
        );

        return true;
    );

    -- scenario 1: arm moves from 0 radians back to 1.2 radians with Kp = 0.1 and Kd = 0.01
    public Scenario1 : () ==> bool
    Scenario1() == (
         dcl StepCount : nat := 0;

        MySystem`arm.SetCurrentPosition(0);
        MySystem`arm.SetTargetPosition(1.2);
        MySystem`arm.SetKp(0.1);
        MySystem`arm.SetKd(0.01);

        while StepCount < 500 do ( 
            MySystem`arm.Step(1);
            StepCount := StepCount + 1;
        );

        return true;
    );

    -- scenario 2: Arm moves from 1.2 radians back to 0 radians with Kp = 0.1 and Kd = 0.01
    public Scenario2 : () ==> bool
    Scenario2() == (
        dcl StepCount : nat := 0;

        MySystem`arm.SetCurrentPosition(1.2);
        MySystem`arm.SetTargetPosition(0);
        MySystem`arm.SetKp(0.1);
        MySystem`arm.SetKd(0.01);

        while StepCount < 500 do ( 
            MySystem`arm.Step(1);
            StepCount := StepCount + 1;
        );

        return true;
    );

    -- scenario 2: Higher `kp` value, arm moves from 0 to 1.2 radians
    public Scenario3 : () ==> bool
    Scenario3() == (
        dcl StepCount : nat := 0;

        MySystem`arm.SetCurrentPosition(0);
        MySystem`arm.SetTargetPosition(1.2);
        MySystem`arm.SetKp(0.5); -- higher kp for a quicker response
        MySystem`arm.SetKd(0.01);

        while StepCount < 500 do ( 
            MySystem`arm.Step(1);
            StepCount := StepCount + 1;
        );

        return true;
    );
    -- scenario 4: Moving between two close points, 0.5 to 0.7 radians with slow response and lower reponse to erorrs
    public Scenario4 : () ==> bool
    Scenario4() == (
        dcl StepCount : nat := 0;

        MySystem`arm.SetCurrentPosition(0.5);
        MySystem`arm.SetTargetPosition(0.7);
        MySystem`arm.SetKp(0.05);
        MySystem`arm.SetKd(0.005);

        while StepCount < 1000 do ( 
            MySystem`arm.Step(1);
            StepCount := StepCount + 1;
        );

        return true;
    );

end World