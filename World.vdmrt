class World

operations

    -- test
    public ScenarioTest : () ==> bool
    ScenarioTest() == (
        dcl StepCount : nat := 0;

        MySystem`arm.SetCurrentPosition(0);
        MySystem`arm.SetTargetPosition(1);
        MySystem`arm.SetKp(0.1); -- systems reaktion p√• en fejl
        MySystem`arm.SetKd(0.2); -- systemets overshoot

        while StepCount < 500 do ( 
            MySystem`arm.Step(1);
            StepCount := StepCount + 1;
        );

        return true;
    );

    -- scenario 1: arm moves from 1 radians back to 1 radians with Kp = 0.1 and Kd = 0.01
    public Scenario1 : () ==> bool
    Scenario1() == (
         dcl StepCount : nat := 0;

        MySystem`arm.SetCurrentPosition(1.5);
        MySystem`arm.SetTargetPosition(1);
        MySystem`arm.SetKp(0.1);
        MySystem`arm.SetKd(0.01);

        while StepCount < 500 do ( 
            MySystem`arm.Step(1);
            StepCount := StepCount + 1;
        );

        return true;
    );

    -- scenario 2: ideal scenario, assuming minimal overshoot and vibration, from 1.3 radians to 0
    public Scenario2 : () ==> bool
    Scenario2() == (
        dcl StepCount : nat := 0;

        MySystem`arm.SetCurrentPosition(1.3);
        MySystem`arm.SetTargetPosition(0);
        MySystem`arm.SetKp(0.2); -- assumed ideal Kp for minimal overshoot
        MySystem`arm.SetKd(0.1); -- assumed ideal Kd for at lessen oscillation

        while StepCount < 500 do ( 
            MySystem`arm.Step(1);
            StepCount := StepCount + 1;
        );

        return true;
    );

    -- scenario 3: Higher `kp` value, arm moves from 0 to 1 radians, starting from 0 radians to 1
    public Scenario3 : () ==> bool
    Scenario3() == (
        dcl StepCount : nat := 0;

        MySystem`arm.SetCurrentPosition(0);
        MySystem`arm.SetTargetPosition(1);
        MySystem`arm.SetKp(0.2); -- higher kp for a quicker response
        MySystem`arm.SetKd(0.3);

        while StepCount < 500 do ( 
            MySystem`arm.Step(1);
            StepCount := StepCount + 1;
        );

        return true;
    );
    -- scenario 4: what can go wrong. To high Kp and too low Kd, starting from 0 to 1.4 radians
    public Scenario4 : () ==> bool
    Scenario4() == (
        dcl StepCount : nat := 0;

        MySystem`arm.SetCurrentPosition(0);
        MySystem`arm.SetTargetPosition(1.4);
        MySystem`arm.SetKp(1.0); -- too high Kp exessive overshoot
        MySystem`arm.SetKd(0.01); -- too low Kd, not enough to dampen oscillation

        while StepCount < 500 do ( 
            MySystem`arm.Step(1);
            StepCount := StepCount + 1;
        );

        return true;
    );

end World