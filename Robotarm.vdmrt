class RobotArm
types 
    public Angle = real inv theta == theta >= 0 and theta <= 1.6 -- our limit with angle limits 0 to 90
    public AngularVelocity = real;
    public AngularAcceleration = real;

values

    Gravity: real = 9.82;

instance variables
    
    public currentPosition: Angle := 0; -- radianer
    public currentVelocity: AngularVelocity := 0; 
    public currentAcceleration: AngularAcceleration := 0;
    public kp: real := 0.1; -- proportional factor
    public kd: real; := 0.01; -- derivative factor
    public armLength: real := 30; -- cm
    public targetPosition: Angle := 0; -- radianer
    public prevError: real := 0; - radianer
    public currentTime: real := 0; -- simuleret tid

operations
    public RobotArm: () ==> RobotArm
    RobotArm() == ();

    SetTargetPosition: () ==> ()
    SetTargetPosition() == (
        targetPosition := 1.2;
    );

    UpdatePosition: () ==> ()
    UpdatePosition() == (
        def dt = 1; 
        currentTime := currentTime + dt; -- simuleret tid

        def error = targetPosition - currentPosition; 
        def derivative = (error - prevError) / dt; 
        prevError := error; 

        def motorTorque = kp * error + kd * derivative; 

        currentAcceleration := motorTorque / (armLength / 100); -- antager uniform massefordeling dvs ingen effektor og unit i m.
        currentVelocity := currentVelocity + currentAcceleration * dt;
        currentPosition := currentPosition + currentVelocity * dt;
    );

end RobotArm